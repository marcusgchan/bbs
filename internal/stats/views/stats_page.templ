package stats

import "github.com/marcusgchan/bbs/internal/sview"
import "strconv"

type Stats struct {
	Version         string
	AvgWaveSurvived string
	HighestWave     string
	Count           string
	StartDate       string
	EndDate         string
}

type CatastropheDeaths struct {
	Version     string
	Data        map[string]int
	TotalDeaths int
}

type StatsPageProps struct {
	Single            *Stats
	Multi             *[]Stats
	Versions          *[]Version
	CatastropheDeaths *[]CatastropheDeaths
}

type Version struct {
	Version   string
	CreatedAt string
}

templ StatsPage(props *StatsPageProps) {
	@sview.Base() {
		@StatsContent(props)
	}
}

templ StatsContent(props *StatsPageProps) {
	<h1 class="text-xl">Statistics</h1>
	<div class="gap-2 grid [grid-template-rows:min-content_1fr] [grid-template-columns:1fr_max-content] [grid-template-areas:'filtered-stats_recent-stats''catastrophe-stats_recent-stats']">
		<section class="flex-1 flex gap-2 [grid-area:filtered-stats]">
			<div>
				<label>Select Version</label>
				<select class="p-2" hx-get="/stats/filtered" hx-trigger="change" hx-target="[data-filtered-stats]" hx-swap="innerHTML" name="version">
					<option value="" selected hidden>Select version</option>
					for _, version := range *props.Versions {
						<option value={ version.Version }>{ version.Version }</option>
					}
				</select>
			</div>
			<div>
				<h2 class="text-lg">Filtered Results</h2>
				@FilteredStats(props.Single)
			</div>
		</section>
		<section class="[grid-area:catastrophe-stats]">
			<h2 class="text-lg">Catastrophe Stats</h2>
			<select class="p-2" hx-get="/stats/catastrophe" hx-trigger="change" hx-target="[data-recent-stats-list]" hx-swap="innerHTML" name="numberOfVersions" value="3">
				<option>3</option>
				<option>4</option>
				<option>5</option>
				<option>6</option>
				<option>7</option>
				<option>8</option>
			</select>
			<ul>
				for _, r := range *props.CatastropheDeaths {
					<li>
						<h3>Version { r.Version }</h3>
						for c, count := range r.Data {
							<p>{ c }: { strconv.Itoa(count) }</p>
						}
					</li>
				}
			</ul>
		</section>
		<section class="space-y-2 [grid-area:recent-stats]">
			<div class="flex gap-2 justify-between">
				<h2 class="text-lg">Recent Test Event Statistics</h2>
				<select class="p-2" hx-get="/stats/latest-versions" hx-trigger="change" hx-target="[data-recent-stats-list]" hx-swap="innerHTML" name="numberOfVersions" value="3">
					<option>3</option>
					<option>4</option>
					<option>5</option>
					<option>6</option>
					<option>7</option>
					<option>8</option>
				</select>
			</div>
			@RecentStatsList(props.Multi)
		</section>
	</div>
}

templ FilteredStats(props *Stats) {
	<div data-filtered-stats>
		if props == nil {
			<p>No Results</p>
		} else {
			<div>
				<p>Version: { props.Version }</p>
				<p>Start date: { props.StartDate }</p>
				<p>End date: { props.EndDate }</p>
				<p>Avg wave survived: { props.AvgWaveSurvived }</p>
				<p>Highest wave survived: { props.HighestWave }</p>
				<p>Total number of test events: { props.Count }</p>
			</div>
		}
	</div>
}

templ RecentStatsList(versions *[]Stats) {
	<div data-recent-stats-list>
		if len(*versions) == 0 {
			<p>No Versions</p>
		} else {
			<ul class="space-y-2">
				for _, s := range *versions {
					<li>
						<p>Version: { s.Version }</p>
						<p>Start date: { s.StartDate }</p>
						<p>End date: { s.EndDate }</p>
						<p>Avg wave survived: { s.AvgWaveSurvived }</p>
						<p>Highest wave survived: { s.HighestWave }</p>
						<p>Total number of test events: { s.Count }</p>
					</li>
				}
			</ul>
		}
	</div>
}
