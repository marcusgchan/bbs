package stats

import "github.com/marcusgchan/bbs/internal/sview"

type Stats struct {
	Version         string
	AvgWaveSurvived string
	HighestWave     string
	Count           string
	StartDate       string
	EndDate         string
}

type StatsPageProps struct {
	Single *Stats
	Multi  *[]Stats
}

templ StatsPage(props *StatsPageProps) {
	@sview.Base() {
		@StatsContent(props)
	}
}

templ StatsContent(props *StatsPageProps) {
	<h1 class="text-xl">Statistics</h1>
	<div class="flex gap-2 justify-between flex-wrap-reverse">
		<section class="space-y-2 flex-1">
			<form class="flex gap-2 justify-between">
				<div>
					<label>Select Version</label>
					<select>
						<option>test</option>
					</select>
				</div>
				<button>Search</button>
			</form>
			<h2 class="text-lg">Filtered Results</h2>
			if props.Single == nil {
				<p>No Results</p>
			} else {
				<div>
					<p>Version: { props.Single.Version }</p>
					<p>Start date: { props.Single.StartDate }</p>
					<p>End date: { props.Single.EndDate }</p>
					<p>Avg wave survived: { props.Single.AvgWaveSurvived }</p>
					<p>Highest wave survived: { props.Single.HighestWave }</p>
					<p>Total number of test events: { props.Single.Count }</p>
				</div>
			}
		</section>
		<section class="space-y-2">
			<div class="flex gap-2 justify-between">
				<h2 class="text-lg">Latest Versions</h2>
				<select class="p-2" hx-get="/stats/latest-versions" hx-trigger="change" hx-target="[data-latest-versions]" hx-swap="outerHTML" name="numberOfVersions" value="3">
					<option>3</option>
					<option>4</option>
					<option>5</option>
					<option>6</option>
					<option>7</option>
					<option>8</option>
				</select>
			</div>
			@LatestVersionsList(props.Multi)
		</section>
	</div>
}

templ LatestVersionsList(versions *[]Stats) {
	<ul data-latest-versions class="space-y-2">
		if len(*versions) == 0 {
			<p>No Versions</p>
		} else {
			for _, s := range *versions {
				<li>
					<p>Version: { s.Version }</p>
					<p>Start date: { s.StartDate }</p>
					<p>End date: { s.EndDate }</p>
					<p>Avg wave survived: { s.AvgWaveSurvived }</p>
					<p>Highest wave survived: { s.HighestWave }</p>
					<p>Total number of test events: { s.Count }</p>
				</li>
			}
		}
	</ul>
}
