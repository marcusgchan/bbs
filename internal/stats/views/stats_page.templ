package stats

import "github.com/marcusgchan/bbs/internal/sview"
import "strconv"

type Stats struct {
	Version         string
	AvgWaveSurvived string
	HighestWave     string
	Count           string
	StartDate       string
	EndDate         string
}

type CatastropheDeaths struct {
	Version       string
	Catastrophies []string
	Deaths        []int
	TotalDeaths   int
}

type StatsPageProps struct {
	Single            *Stats
	Multi             *[]Stats
	Versions          *[]Version
	CatastropheDeaths *[]CatastropheDeaths
	*InputDefaults
}

type InputDefaults struct {
	Catastrophe      string
	RecentTestEvents string
	TestEvent        string
}

type Version struct {
	Version   string
	CreatedAt string
}

templ StatsPage(props *StatsPageProps) {
	@sview.Base() {
		@StatsContent(props)
	}
}

templ StatsContent(props *StatsPageProps) {
	<h1 class="text-xl">Statistics</h1>
	<div class="gap-2 grid [grid-template-rows:min-content_1fr] [grid-template-columns:1fr_max-content] [grid-template-areas:'catastrophe-stats_recent-stats''filtered-stats_recent-stats']">
		<section class="flex-1 flex gap-2 [grid-area:filtered-stats]">
			<div>
				<label>Select Version</label>
				<select
					hx-get="/stats"
					hx-trigger="change"
					hx-trigger="change"
					class="p-2"
					hx-target="[data-filtered-stats]"
					hx-swap="innerHTML"
					name="version"
				>
					if props.InputDefaults.TestEvent == "" {
						<option value="" selected hidden>Select version</option>
					}
					for _, version := range *props.Versions {
						<option
							value={ version.Version }
							if version.Version == props.InputDefaults.TestEvent {
								selected
							}
						>{ version.Version }</option>
					}
				</select>
			</div>
			<div>
				<h2 class="text-lg">Filtered Results</h2>
				@FilteredStats(props.Single)
			</div>
		</section>
		<section class="[grid-area:catastrophe-stats] min-w-0">
			<div class="flex gap-2">
				<h2 class="text-lg">Catastrophe Stats</h2>
				<select class="p-2" hx-get="/stats" hx-trigger="change" hx-target="[data-catastrophe-stats-list]" hx-swap="innerHTML" name="numberOfVersionsForCatastrophe" value={ props.InputDefaults.Catastrophe }>
					for i := 3; i < 9; i++ {
						<option
							value={ strconv.Itoa(i) }
							if strconv.Itoa(i) == props.InputDefaults.Catastrophe {
								selected
							}
						>{ strconv.Itoa(i) }</option>
					}
				</select>
			</div>
			@CatastropheStatsList(props.CatastropheDeaths)
		</section>
		<section class="space-y-2 [grid-area:recent-stats]">
			<div class="flex gap-2">
				<h2 class="text-lg">Recent Test Event Statistics</h2>
				<select class="p-2" hx-target="[data-recent-stats-list]" hx-get="/stats" hx-trigger="change" hx-swap="innerHTML" name="numberOfVersionsForTestEvent" value={ props.InputDefaults.RecentTestEvents }>
					for i := 3; i < 9; i++ {
						<option
							value={ strconv.Itoa(i) }
							if strconv.Itoa(i) == props.InputDefaults.RecentTestEvents {
								selected
							}
						>{ strconv.Itoa(i) }</option>
					}
				</select>
			</div>
			@RecentStatsList(props.Multi)
		</section>
	</div>
}

templ CatastropheStatsList(props *[]CatastropheDeaths) {
	<section data-catastrophe-stats-list>
		for _, v := range *props {
			<h3 class="text-lg">{ v.Version }</h3>
			<div class="w-full">
				<canvas id={ "catastrophe-deaths-" + v.Version }></canvas>
			</div>
		}
	</section>
	@graph(*props)
}

script graph(data []CatastropheDeaths) {
    requestAnimationFrame(() => {
        for (const {Version, Catastrophies, Deaths} of data) {
            const ctx = document.getElementById('catastrophe-deaths-' + Version);
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: Catastrophies,
                    datasets: [{
                        label: '# of Deaths',
                        data: Deaths,
                        borderWidth: 1
                  }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            }); 
        }
    })
}

templ FilteredStats(props *Stats) {
	<div data-filtered-stats>
		if props == nil {
			<p>No Results</p>
		} else {
			<div>
				<p>Version: { props.Version }</p>
				<p>Start date: { props.StartDate }</p>
				<p>End date: { props.EndDate }</p>
				<p>Avg wave survived: { props.AvgWaveSurvived }</p>
				<p>Highest wave survived: { props.HighestWave }</p>
				<p>Total number of test events: { props.Count }</p>
			</div>
		}
	</div>
}

templ RecentStatsList(versions *[]Stats) {
	<div data-recent-stats-list>
		if len(*versions) == 0 {
			<p>No Versions</p>
		} else {
			<ul class="space-y-2">
				for _, s := range *versions {
					<li>
						<p>Version: { s.Version }</p>
						<p>Start date: { s.StartDate }</p>
						<p>End date: { s.EndDate }</p>
						<p>Avg wave survived: { s.AvgWaveSurvived }</p>
						<p>Highest wave survived: { s.HighestWave }</p>
						<p>Total number of test events: { s.Count }</p>
					</li>
				}
			</ul>
		}
	</div>
}
