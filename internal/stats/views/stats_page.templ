package stats

import "github.com/marcusgchan/bbs/internal/sview"
import "strconv"

type StatsByVersion struct {
	Version string
	Normal  *Stats
	Hard    *Stats
}

type Stats struct {
	GeneralStats      *GeneralStats
	CatastropheDeaths *CatastropheDeaths
}

type GeneralStats struct {
	Version         string
	AvgWaveSurvived string
	HighestWave     string
	Count           string
	StartDate       string
	EndDate         string
}

type CatastropheDeaths struct {
	Catastrophies []string
	Deaths        []int
	TotalDeaths   int
}

type StatsPageProps struct {
	StatsByVersion *[]StatsByVersion
	Versions       *[]Version
	*InputDefaults
}

type InputDefaults struct {
	RecentTestEvents string
	TestEvent        string
}

type Version struct {
	Version   string
	CreatedAt string
}

templ StatsPage(props *StatsPageProps) {
	@sview.Base() {
		@StatsContent(props)
	}
}

templ StatsContent(props *StatsPageProps) {
	<h1 class="text-xl">Statistics</h1>
	<div class="grid gap-2">
		<section class="space-y-2">
			<h2 class="text-lg">Stats by Version</h2>
			<select class="p-2" hx-target="[data-stats-by-version]" hx-get="/stats" hx-trigger="change" hx-swap="outerHTML" name="numberOfVersionsForTestEvent" value={ props.InputDefaults.RecentTestEvents }>
				for i := 1; i < 9; i++ {
					<option
						value={ strconv.Itoa(i) }
						if strconv.Itoa(i) == props.InputDefaults.RecentTestEvents {
							selected
						}
					>{ strconv.Itoa(i) }</option>
				}
			</select>
			@StatsByVersionList(props.StatsByVersion)
		</section>
	</div>
}

script graph(data *CatastropheDeaths, version string, difficulty string) {
    requestAnimationFrame(() => {
        const {Version, Difficulty, Catastrophies, Deaths} = data
        const ctx = document.getElementById(`catastrophe-deaths-${version}-${difficulty}`);
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: Catastrophies,
                datasets: [{
                    label: '# of Deaths',
                    data: Deaths,
                    borderWidth: 1
              }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        }); 
    })
}

templ StatsByVersionList(props *[]StatsByVersion) {
	<ul data-stats-by-version>
		for _, s := range *props {
			<li>
				<h3 class="text-lg mb-2">{ s.Version }</h3>
				if s.Normal != nil {
					<article>
						<h4>Normal</h4>
						<div class="flex items-center gap-2">
							@CatastropheDeathsComp(s.Normal.CatastropheDeaths, s.Version, "normal")
							@GeneralStatsComp(s.Normal.GeneralStats)
						</div>
					</article>
				}
				if s.Hard != nil {
					<article>
						<h4>Hard</h4>
						<div class="flex gap-2 items-center">
							@CatastropheDeathsComp(s.Hard.CatastropheDeaths, s.Version, "hard")
							@GeneralStatsComp(s.Hard.GeneralStats)
						</div>
					</article>
				}
			</li>
		}
	</ul>
}

templ GeneralStatsComp(props *GeneralStats) {
	<div>
		<p>Start date: { props.StartDate }</p>
		<p>End date: { props.EndDate }</p>
		<p>Avg wave survived: { props.AvgWaveSurvived }</p>
		<p>Highest wave survived: { props.HighestWave }</p>
		<p>Number of test events: { props.Count }</p>
	</div>
}

templ CatastropheDeathsComp(props *CatastropheDeaths, version string, difficulty string) {
	<div class="w-full">
		<canvas class="h-80 max-w-full" id={ "catastrophe-deaths-" + version + "-" + difficulty }></canvas>
	</div>
	@graph(props, version, difficulty)
}
