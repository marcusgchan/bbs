// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: player.sql

package database

import (
	"context"
)

const createPlayer = `-- name: CreatePlayer :exec
INSERT OR REPLACE INTO players (id, name) VALUES (?, ?)
`

type CreatePlayerParams struct {
	ID   string
	Name string
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) error {
	_, err := q.db.ExecContext(ctx, createPlayer, arg.ID, arg.Name)
	return err
}

const getPlayers = `-- name: GetPlayers :many
SELECT id, name, createdat, updatedat FROM players
ORDER BY updatedAt DESC
LIMIT ? OFFSET ?
`

type GetPlayersParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) GetPlayers(ctx context.Context, arg GetPlayersParams) ([]Player, error) {
	rows, err := q.db.QueryContext(ctx, getPlayers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
