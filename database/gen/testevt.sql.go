// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: testevt.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createPlayerTestEvt = `-- name: CreatePlayerTestEvt :exec
INSERT INTO player_test_events (playerId, testEventId) values (?, ?)
`

type CreatePlayerTestEvtParams struct {
	Playerid    string
	Testeventid string
}

func (q *Queries) CreatePlayerTestEvt(ctx context.Context, arg CreatePlayerTestEvtParams) error {
	_, err := q.db.ExecContext(ctx, createPlayerTestEvt, arg.Playerid, arg.Testeventid)
	return err
}

const createPlayerTestResult = `-- name: CreatePlayerTestResult :exec
INSERT INTO player_test_results (playerId, testResultId, wavesSurvived, diedTo) VALUES (?, ?, ?, ?)
`

type CreatePlayerTestResultParams struct {
	Playerid      string
	Testresultid  int64
	Wavessurvived int64
	Diedto        string
}

func (q *Queries) CreatePlayerTestResult(ctx context.Context, arg CreatePlayerTestResultParams) error {
	_, err := q.db.ExecContext(ctx, createPlayerTestResult,
		arg.Playerid,
		arg.Testresultid,
		arg.Wavessurvived,
		arg.Diedto,
	)
	return err
}

const createTestEvt = `-- name: CreateTestEvt :exec
INSERT INTO test_events (id, environment, templateId, difficulty, version, startedAt) VALUES (?, ?, ?, ?, ?, ?)
`

type CreateTestEvtParams struct {
	ID          string
	Environment string
	Templateid  string
	Difficulty  string
	Version     string
	Startedat   time.Time
}

func (q *Queries) CreateTestEvt(ctx context.Context, arg CreateTestEvtParams) error {
	_, err := q.db.ExecContext(ctx, createTestEvt,
		arg.ID,
		arg.Environment,
		arg.Templateid,
		arg.Difficulty,
		arg.Version,
		arg.Startedat,
	)
	return err
}

const createTestResult = `-- name: CreateTestResult :one
INSERT INTO test_results (moneyEarned, endedAt) VALUES (?, ?) RETURNING id
`

type CreateTestResultParams struct {
	Moneyearned int64
	Endedat     time.Time
}

func (q *Queries) CreateTestResult(ctx context.Context, arg CreateTestResultParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createTestResult, arg.Moneyearned, arg.Endedat)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createVersion = `-- name: CreateVersion :exec
INSERT OR IGNORE INTO versions (value) VALUES (?)
`

func (q *Queries) CreateVersion(ctx context.Context, value string) error {
	_, err := q.db.ExecContext(ctx, createVersion, value)
	return err
}

const getTestEvtPlayerResults = `-- name: GetTestEvtPlayerResults :many
SELECT player_test_results.playerid, player_test_results.testresultid, player_test_results.wavessurvived, player_test_results.diedto, players.id, players.name, players.createdat, players.updatedat
FROM player_test_results
JOIN players ON player_test_results.playerId = players.id
WHERE player_test_results.testResultId = ?
`

type GetTestEvtPlayerResultsRow struct {
	PlayerTestResult PlayerTestResult
	Player           Player
}

func (q *Queries) GetTestEvtPlayerResults(ctx context.Context, testresultid int64) ([]GetTestEvtPlayerResultsRow, error) {
	rows, err := q.db.QueryContext(ctx, getTestEvtPlayerResults, testresultid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTestEvtPlayerResultsRow
	for rows.Next() {
		var i GetTestEvtPlayerResultsRow
		if err := rows.Scan(
			&i.PlayerTestResult.Playerid,
			&i.PlayerTestResult.Testresultid,
			&i.PlayerTestResult.Wavessurvived,
			&i.PlayerTestResult.Diedto,
			&i.Player.ID,
			&i.Player.Name,
			&i.Player.Createdat,
			&i.Player.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTestEvtResults = `-- name: GetTestEvtResults :one
SELECT test_events.id, test_events.environment, test_events.difficulty, test_events.templateid, test_events.testresultid, test_events.startedat, test_events.version, test_results.id, test_results.moneyearned, test_results.endedat, templates.id, templates.playerid, templates.data, templates.name, templates.createdat, templates.updatedat
FROM test_events
JOIN test_results ON test_events.testResultId = test_results.id
JOIN templates ON test_events.templateId = templates.id
WHERE test_events.id = ?
`

type GetTestEvtResultsRow struct {
	TestEvent  TestEvent
	TestResult TestResult
	Template   Template
}

func (q *Queries) GetTestEvtResults(ctx context.Context, id string) (GetTestEvtResultsRow, error) {
	row := q.db.QueryRowContext(ctx, getTestEvtResults, id)
	var i GetTestEvtResultsRow
	err := row.Scan(
		&i.TestEvent.ID,
		&i.TestEvent.Environment,
		&i.TestEvent.Difficulty,
		&i.TestEvent.Templateid,
		&i.TestEvent.Testresultid,
		&i.TestEvent.Startedat,
		&i.TestEvent.Version,
		&i.TestResult.ID,
		&i.TestResult.Moneyearned,
		&i.TestResult.Endedat,
		&i.Template.ID,
		&i.Template.Playerid,
		&i.Template.Data,
		&i.Template.Name,
		&i.Template.Createdat,
		&i.Template.Updatedat,
	)
	return i, err
}

const getTestEvts = `-- name: GetTestEvts :many
SELECT test_events.id, test_events.environment, test_events.difficulty, test_events.templateid, test_events.testresultid, test_events.startedat, test_events.version, players.name as mainPlayer 
FROM test_events
JOIN templates ON templates.id = test_events.templateId
JOIN players ON players.id = templates.playerId
ORDER BY test_events.startedAt DESC
LIMIT ? OFFSET ?
`

type GetTestEvtsParams struct {
	Limit  int64
	Offset int64
}

type GetTestEvtsRow struct {
	ID           string
	Environment  string
	Difficulty   string
	Templateid   string
	Testresultid sql.NullInt64
	Startedat    time.Time
	Version      string
	Mainplayer   string
}

func (q *Queries) GetTestEvts(ctx context.Context, arg GetTestEvtsParams) ([]GetTestEvtsRow, error) {
	rows, err := q.db.QueryContext(ctx, getTestEvts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTestEvtsRow
	for rows.Next() {
		var i GetTestEvtsRow
		if err := rows.Scan(
			&i.ID,
			&i.Environment,
			&i.Difficulty,
			&i.Templateid,
			&i.Testresultid,
			&i.Startedat,
			&i.Version,
			&i.Mainplayer,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT username, password FROM users WHERE username = ?
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(&i.Username, &i.Password)
	return i, err
}

const updateTestEvtWithTestRes = `-- name: UpdateTestEvtWithTestRes :one
UPDATE test_events SET testResultId = ? WHERE id = ? RETURNING id
`

type UpdateTestEvtWithTestResParams struct {
	Testresultid sql.NullInt64
	ID           string
}

func (q *Queries) UpdateTestEvtWithTestRes(ctx context.Context, arg UpdateTestEvtWithTestResParams) (string, error) {
	row := q.db.QueryRowContext(ctx, updateTestEvtWithTestRes, arg.Testresultid, arg.ID)
	var id string
	err := row.Scan(&id)
	return id, err
}
